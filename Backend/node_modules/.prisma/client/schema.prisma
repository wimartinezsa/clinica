// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Tipo_Ident {
  CC
  CE
  CD
  PA
  SC
  PE
  RC
  TI
  CN
  AS
  MS
}

enum Sex {
  Femenino
  Masculino
  Indetermidado
}

enum Tipo_Paciente {
  Contributivo
  Subsidiado
  Vinculado
  Particular
  Otro
}

model Paciente {
  id_paciente         Int        @id @default(autoincrement())
  tipo_identificacion Tipo_Ident
  identificacion      String     @unique @db.VarChar(30)

  primer_nombre    String  @db.VarChar(50)
  segundo_nombre   String? @db.VarChar(50)
  primer_apellido  String  @db.VarChar(50)
  segundo_apellido String? @db.VarChar(50)

  fecha_nacimiento DateTime      @db.Date
  sexo             Sex
  email            String        @unique
  telefono         String?
  direccion        String?       @db.VarChar(50)
  tipo_paciente    Tipo_Paciente

  estado        Estado          @default(Activo)
  procedimiento Procedimiento[]

  municipio   Municipio @relation(fields: [municipioId], references: [id_municipio])
  municipioId Int

  eps   Eps @relation(fields: [epsId], references: [id_eps])
  epsId Int

  @@map("Pacientes")
}

enum Estado {
  Activo
  Inactivo
}

model Eps {
  id_eps   Int        @id @default(autoincrement())
  codigo   String     @db.VarChar(20)
  nombre   String     @db.VarChar(50)
  estado   Estado     @default(Activo)
  paciente Paciente[]

  @@map("eps")
}

model Tipo_Procedimiento {
  id_tipo_procedimiento Int             @id @default(autoincrement())
  nombre                String          @db.VarChar(50)
  procedimiento         Procedimiento[]

  @@map("Tito_procedimiento")
}

model Procedimiento {
  id_procedimiento Int       @id @default(autoincrement())
  factura          Int
  fecha            DateTime
  edad_persona     String    @db.VarChar(20)
  estado           Estado    @default(Activo)
  createAt         DateTime  @default(now())
  updateAt         DateTime  @default(now())
  estudio          Estudio[]

  acuerdo   Acuerdo @relation(fields: [acuerdoId], references: [id_acuerdo])
  acuerdoId Int

  tipo_procedimiento   Tipo_Procedimiento @relation(fields: [tipo_procedimientoId], references: [id_tipo_procedimiento])
  tipo_procedimientoId Int

  paciente   Paciente @relation(fields: [pacienteId], references: [id_paciente])
  pacienteId Int

  @@map("procedimientos")
}

model Estudio {
  id_estudio      Int      @id @default(autoincrement())
  consecutivo     Int
  cantidad        Int
  fecha_muestra   DateTime
  fecha_resultado DateTime
  resultado       String   @db.VarChar(30)
  observacion     String   @db.VarChar(200)
  profesional     Int

  paquete   Paquete @relation(fields: [paqueteId], references: [id_paquete])
  paqueteId Int

  procedimiento   Procedimiento @relation(fields: [procedimientoId], references: [id_procedimiento])
  procedimientoId Int

  @@map("Estudios")
}

model Departamento {
  id_departamento Int         @id @default(autoincrement())
  nombre          String      @db.VarChar(50)
  municipio       Municipio[]

  @@map("departamentos")
}

model Municipio {
  id_municipio Int    @id @default(autoincrement())
  nombre       String @db.VarChar(50)

  departamento   Departamento @relation(fields: [departamentoId], references: [id_departamento])
  departamentoId Int

  paciente Paciente[]
  empresa  Empresa[]

  @@map("Municipios")
}

// es la misma tabla de protocolo
model Tipo_Servicio {
  id_tipo_servicio Int        @id @default(autoincrement())
  nombre           String     @db.VarChar(50)
  estado           Estado     @default(Activo)
  servicio         Servicio[]

  @@map("tipos_servicios")
}

model Servicio {
  id_servicio Int     @id @default(autoincrement())
  nombre      String  @db.VarChar(50)
  nivel       Int
  precio      Decimal @db.Decimal(10, 2)
  estado      Estado  @default(Activo)

  paquete Paquete[]
  acuerdo Acuerdo[]

  tipo_servicio   Tipo_Servicio @relation(fields: [tipo_servicioId], references: [id_tipo_servicio])
  tipo_servicioId Int

  prestador   Prestador @relation(fields: [prestadorId], references: [id_prestador])
  prestadorId Int

  @@map("Servicios")
}

model Examen {
  id_examen       Int     @id @default(autoincrement())
  nombre          String  @db.VarChar(50)
  unidades        String  @db.VarChar(30)
  rango_biologico String  @db.VarChar(20)
  metodo          String  @db.VarChar(30)
  precio          Decimal @db.Decimal(10, 2)
  estado          Estado  @default(Activo)

  tipo_examen   Tipo_Examen @relation(fields: [tipo_examenId], references: [id_tipo_examen])
  tipo_examenId Int

  tipo_resultado Tipo_Resultado[]

  paquete Paquete[]

  @@map("examenes")
}

model Tipo_Resultado {
  id_tipo_resultado Int    @id @default(autoincrement())
  nombre            String @db.VarChar(50)
  estado            Estado @default(Activo)
  examen            Examen @relation(fields: [examenId], references: [id_examen])
  examenId          Int

  @@map("tipos_resultados")
}

model Tipo_Examen {
  id_tipo_examen Int      @id @default(autoincrement())
  nombre         String   @db.VarChar(50)
  estado         Estado   @default(Activo)
  examen         Examen[]

  @@map("tipos_Examenes")
}

model Prestador {
  id_prestador Int        @id @default(autoincrement())
  codigo       String     @unique @db.VarChar(30)
  nit          String     @db.VarChar(30)
  razon_social String     @db.VarChar(50)
  servicio     Servicio[]
  usuario      Usuario[]

  @@map("Prestadores")
}

enum Rol {
  Administrador
  Facturacion
  Bacteriologo
}

model Usuario {
  id_usuario     Int    @id @default(autoincrement())
  identificacion String @unique @db.VarChar(30)
  nombre         String @db.VarChar(30)
  cargo          String @db.VarChar(50)
  rol            Rol
  email          String @db.VarChar(50)
  password       String @db.VarChar(100)
  estado         Estado @default(Activo)

  prestador   Prestador @relation(fields: [prestadorId], references: [id_prestador])
  prestadorId Int

  @@map("usuarios")
}

enum Tipo_Empresa {
  Particular
  Empresa
  Eps
  Esess
}

model Empresa {
  id_empresa Int          @id @default(autoincrement())
  nit        String       @db.VarChar(530)
  codigo     Int
  nombre     String       @db.VarChar(50)
  sigla      String       @db.VarChar(50)
  tipo       Tipo_Empresa
  estado     Estado       @default(Activo)

  municipio   Municipio @relation(fields: [municipioId], references: [id_municipio])
  municipioId Int

  contrato Contrato[]

  @@map("Empresas")
}

model Contrato {
  id_contrato  Int      @id @default(autoincrement())
  fecha_inicio DateTime @db.Date
  fecha_fin    DateTime @db.Date
  estado       Estado   @default(Activo)

  empresa   Empresa @relation(fields: [empresaId], references: [id_empresa])
  empresaId Int

  acuerdo Acuerdo[]

  @@map("Contratos")
}

model Acuerdo {
  id_acuerdo Int      @id @default(autoincrement())
  estado     Estado   @default(Activo)
  precio     Decimal  @db.Decimal(10, 2)
  iva        Decimal  @db.Decimal(10, 2)
  createAt   DateTime @default(now())
  updateAt   DateTime @default(now())

  procedimiento Procedimiento[]

  contrato   Contrato @relation(fields: [contratoId], references: [id_contrato])
  contratoId Int

  servicio   Servicio @relation(fields: [servicioId], references: [id_servicio])
  servicioId Int

  @@map("Acuerdos")
}

model Paquete {
  id_paquete Int    @id @default(autoincrement())
  estado     Estado @default(Activo)

  estudio Estudio[]

  examen   Examen @relation(fields: [examenId], references: [id_examen])
  examenId Int

  servicio   Servicio @relation(fields: [servicioId], references: [id_servicio])
  servicioId Int

  @@map("Paquetes")
}
