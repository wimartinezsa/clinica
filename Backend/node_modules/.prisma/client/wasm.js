
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.20.0
 * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
 */
Prisma.prismaVersion = {
  client: "5.20.0",
  engine: "06fc58a368dc7be9fbbbe894adf8d445d208c284"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id_usuario: 'id_usuario',
  tipo_identificacion: 'tipo_identificacion',
  identificacion: 'identificacion',
  primer_nombre: 'primer_nombre',
  segundo_nombre: 'segundo_nombre',
  primer_apellido: 'primer_apellido',
  segundo_apellido: 'segundo_apellido',
  fecha_nacimiento: 'fecha_nacimiento',
  sexo: 'sexo',
  email: 'email',
  telefono: 'telefono',
  direccion: 'direccion',
  tipo_usuario: 'tipo_usuario',
  municipio: 'municipio',
  estado: 'estado',
  createAt: 'createAt',
  updateAt: 'updateAt',
  eps: 'eps'
};

exports.Prisma.EpsScalarFieldEnum = {
  id_eps: 'id_eps',
  codigo: 'codigo',
  nombre: 'nombre',
  estado: 'estado'
};

exports.Prisma.Tipo_ProcedimientoScalarFieldEnum = {
  id_tipo_procedimiento: 'id_tipo_procedimiento',
  nombre: 'nombre'
};

exports.Prisma.ProcedimientoScalarFieldEnum = {
  id_procedimiento: 'id_procedimiento',
  factura: 'factura',
  consecutivo: 'consecutivo',
  fecha: 'fecha',
  edad_persona: 'edad_persona',
  tipo_procedimiento: 'tipo_procedimiento',
  tarifa: 'tarifa',
  usuario: 'usuario'
};

exports.Prisma.ResultadoScalarFieldEnum = {
  id_resultado: 'id_resultado',
  cantidad: 'cantidad',
  valor: 'valor',
  resultado: 'resultado',
  observacion: 'observacion',
  procedimiento: 'procedimiento',
  detalle_servicio: 'detalle_servicio'
};

exports.Prisma.DepartamentoScalarFieldEnum = {
  id_departamento: 'id_departamento',
  nombre: 'nombre'
};

exports.Prisma.MunicipioScalarFieldEnum = {
  id_municipio: 'id_municipio',
  nombre: 'nombre',
  departamento: 'departamento'
};

exports.Prisma.Tipo_ServicioScalarFieldEnum = {
  id_tipo_servicio: 'id_tipo_servicio',
  nombre: 'nombre',
  estado: 'estado'
};

exports.Prisma.ServicioScalarFieldEnum = {
  id_servicio: 'id_servicio',
  nombre: 'nombre',
  precio: 'precio',
  iva: 'iva',
  nivel: 'nivel',
  tipo_servicio: 'tipo_servicio',
  prestador: 'prestador'
};

exports.Prisma.Detalle_ServicioScalarFieldEnum = {
  id_detalle_servicio: 'id_detalle_servicio',
  estado: 'estado',
  servicio: 'servicio',
  examen: 'examen'
};

exports.Prisma.ExamenScalarFieldEnum = {
  id_examen: 'id_examen',
  nombre: 'nombre',
  unidades: 'unidades',
  valor_referencia: 'valor_referencia',
  resultado: 'resultado',
  tecnica: 'tecnica',
  precio: 'precio',
  estado: 'estado',
  tipo_examen: 'tipo_examen'
};

exports.Prisma.Tipo_ResultadoScalarFieldEnum = {
  id_tipo_resultado: 'id_tipo_resultado',
  nombre: 'nombre',
  estado: 'estado',
  examen: 'examen'
};

exports.Prisma.Tipo_ExamenScalarFieldEnum = {
  id_tipo_examen: 'id_tipo_examen',
  nombre: 'nombre',
  estado: 'estado'
};

exports.Prisma.PrestadorScalarFieldEnum = {
  id_prestador: 'id_prestador',
  codigo: 'codigo',
  razon_social: 'razon_social',
  consecutivo: 'consecutivo'
};

exports.Prisma.EmpleadoScalarFieldEnum = {
  id_empleado: 'id_empleado',
  identificacion: 'identificacion',
  nombre: 'nombre',
  cargo: 'cargo',
  rol: 'rol',
  password: 'password',
  prestador: 'prestador'
};

exports.Prisma.EmpresaScalarFieldEnum = {
  id_empresa: 'id_empresa',
  nit: 'nit',
  codigo: 'codigo',
  nombre: 'nombre',
  sigla: 'sigla',
  tipo: 'tipo',
  estado: 'estado',
  municipio: 'municipio'
};

exports.Prisma.ContratoScalarFieldEnum = {
  id_contrato: 'id_contrato',
  fecha_inicio: 'fecha_inicio',
  fecha_fin: 'fecha_fin',
  estado: 'estado',
  empresa: 'empresa'
};

exports.Prisma.TarifaScalarFieldEnum = {
  id_tarifa: 'id_tarifa',
  estado: 'estado',
  valor: 'valor',
  contrato: 'contrato',
  servicio: 'servicio'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Tipo_Ident = exports.$Enums.Tipo_Ident = {
  AS: 'AS',
  CC: 'CC',
  CE: 'CE',
  MV: 'MV',
  RC: 'RC',
  TI: 'TI'
};

exports.Sex = exports.$Enums.Sex = {
  Femenino: 'Femenino',
  Masculino: 'Masculino',
  Indetermidado: 'Indetermidado'
};

exports.Tipo_Usuario = exports.$Enums.Tipo_Usuario = {
  Contributivo: 'Contributivo',
  Subsidiado: 'Subsidiado',
  Vinculado: 'Vinculado',
  Particular: 'Particular',
  Otro: 'Otro'
};

exports.Estado = exports.$Enums.Estado = {
  Activo: 'Activo',
  Inactivo: 'Inactivo'
};

exports.Rol = exports.$Enums.Rol = {
  Administrador: 'Administrador',
  Facturacion: 'Facturacion',
  Bacteriologo: 'Bacteriologo'
};

exports.Tipo_Empresa = exports.$Enums.Tipo_Empresa = {
  Particular: 'Particular',
  Empresa: 'Empresa',
  Eps: 'Eps',
  Esess: 'Esess'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Eps: 'Eps',
  Tipo_Procedimiento: 'Tipo_Procedimiento',
  Procedimiento: 'Procedimiento',
  Resultado: 'Resultado',
  Departamento: 'Departamento',
  Municipio: 'Municipio',
  Tipo_Servicio: 'Tipo_Servicio',
  Servicio: 'Servicio',
  Detalle_Servicio: 'Detalle_Servicio',
  Examen: 'Examen',
  Tipo_Resultado: 'Tipo_Resultado',
  Tipo_Examen: 'Tipo_Examen',
  Prestador: 'Prestador',
  Empleado: 'Empleado',
  Empresa: 'Empresa',
  Contrato: 'Contrato',
  Tarifa: 'Tarifa'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
